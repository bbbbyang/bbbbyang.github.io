<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bingyang</title>
  
  <subtitle>总有人把你推向阳光</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-04-13T06:18:18.690Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Bingyang Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Let&#39;s Talk About Web Server</title>
    <link href="http://yoursite.com/2022/04/13/Let-s-Talk-About-Web-Server/"/>
    <id>http://yoursite.com/2022/04/13/Let-s-Talk-About-Web-Server/</id>
    <published>2022-04-13T06:16:32.000Z</published>
    <updated>2022-04-13T06:18:18.690Z</updated>
    
    <content type="html"><![CDATA[<p>Apache, Tomcat, Jetty, Spring, SparkJava. When a beginner starts a backend application, frameworks take care everything, we don’t need to care about how it works just focus on the API programming which is good and bad. I want to talk about them from my understanding, my learning path.</p><h3 id="What-is-a-server"><a href="#What-is-a-server" class="headerlink" title="What is a server"></a>What is a server</h3><p>When I start my work for SiriusXM, I did a lot of network IO work involved lots of TCP connections (Client/Server). At that time, I don’t even touch HTTP server. Server is not only meaning web/HTTP server. For me, the server means a pure TCP server, it can be database server, or websocket server or any computer you can get a response.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sock = socket(AF_INET,SOCK_STREAM,0);</span><br><span class="line">int ret = bind(sock, port); // bind port</span><br><span class="line">ret = listen(sock,1); // listen</span><br><span class="line">connfd = accept(sock, client, client_addrlength); // accept connection</span><br><span class="line">int fd = open(&quot;hello.html&quot;,O_RDONLY);</span><br><span class="line">sendfile(connfd,fd,NULL,2500); // send response</span><br></pre></td></tr></table></figure><p>This is a simple TCP server which does not handle HTTP and just return a HTML file. However when you connect to this server through a browser, it will still get HTML file back and see the HTML content. So the core of the web HTTP server is just a TCP server return a HTML file.</p><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p>The HTTP is a protocal which define the rules how client and server communicate with each other and transfer data, like only client can fire a connection to server then server will give response back, etc. We often compared it with websocket. HTTP can be not only used in web browser, it can be used any application. HTTP connection can be considered 3 steps. First is to establish a TCP connection. Second client generates HTTP format request and send to server. Last server sends back HTTP format response to client.</p><p>Apache is a widely used HTTP server. Apache has a process of URI Translation, it will translate the URL to find which resource it looking for and return the file, such as HTML, tar, etc. It kinda looks like what we did before, return a file but the pure TCP server does not have ability to analysis URL, the server can only accept the connection with the hostname and port. What’s more, apache can analysis more based on HTTP protocal.</p><p>It can only provide static content. For a web serverm, all web page needs to be written and placed in the designate path.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                request</span><br><span class="line">web broswer     ------&gt;       HTTP server</span><br><span class="line">                               get file</span><br><span class="line">                &lt;------</span><br><span class="line">                response</span><br></pre></td></tr></table></figure></p><p><em>When we hit <code>http://laravel.com</code>, Apache analyse the request information knows that we didn’t specify a file, so it looks for a directory index and finds <code>index.php</code>. <code>.php</code> file should send to PHP app. Then Apache receives the output from PHP and sends it back over the Internet to a user’s web browser.</em></p><h3 id="Tomcat-Jetty"><a href="#Tomcat-Jetty" class="headerlink" title="Tomcat/Jetty"></a>Tomcat/Jetty</h3><p>Static content is not enough for complex web service, and we need dynamic content. Also when we have complicated web service and we don’t want to couple web service with HTTP server. HTTP server should not be responsible for finding the right service to ask for content. As a result, we define a abstract layer, which are interfaces for Java application, Servlet.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">               request</span><br><span class="line">web broswer    ------&gt;     HTTP server   -----&gt;    Servlet   ----&gt;   service</span><br><span class="line">               &lt;------                   &lt;-----              &lt;----</span><br><span class="line">               response</span><br></pre></td></tr></table></figure></p><p>This is not completely right, it is easy to understand. Servelets need to be deployed in Servlet container. Servlet container will find right servlet for the request.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface Servlet &#123;</span><br><span class="line">    void init(ServletConfig config) throws ServletException;</span><br><span class="line">    ServletConfig getServletConfig();</span><br><span class="line">    void service(ServletRequest req, ServletResponse res）throws ServletException, IOException;</span><br><span class="line">    String getServletInfo();</span><br><span class="line">    void destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>For a simple example, we can inherit HttpServlet and implement service we want and map and request with corresponding services in web.xml. Then we deploy these into web container. Tomcat and Jetty is a web container (HTTP server plus servlet container).</p><p>In constructing response, we can put data from dababase in to it.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    response.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br><span class="line">    out.println(&quot;&lt;HTML&gt;My Servlet!&quot;);</span><br><span class="line">    out.println(data);</span><br><span class="line">    out.println(&quot;&lt;/HTML&gt;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>For now, all frontend pages are generated from backend and sent to web browser. It is heavy load. Nowadays, we separate frontend and backend. Frontend like Angular/React call backend endpoint to get data. Backend only return json instead of the whole HTML page.</p><p><em>Like PHP/ASP, Java provides JSP to generate HTML from backend. Developer can write Java code in HTML style template and generate HTML file. JSP is a wrapped servlet, we don’t talk too much here.</em></p><h3 id="Other-Framework"><a href="#Other-Framework" class="headerlink" title="Other Framework"></a>Other Framework</h3><p>Spring wraps tomcat and SparkJava uses Jetty. SpringMVC is based on servlet. If we don’t know what is servlet and how does it work, it is hard to understand <a href="https://stackify.com/spring-mvc/" target="_blank" rel="noopener">SpringMVC</a>. If there is anything wrong here, please let me know by email.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Apache, Tomcat, Jetty, Spring, SparkJava. When a beginner starts a backend application, frameworks take care everything, we don’t need to
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Web Server" scheme="http://yoursite.com/tags/Web-Server/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Programming</title>
    <link href="http://yoursite.com/2021/11/08/Dynamic-Programming/"/>
    <id>http://yoursite.com/2021/11/08/Dynamic-Programming/</id>
    <published>2021-11-09T01:38:03.000Z</published>
    <updated>2021-11-09T03:33:23.887Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Backtracing"><a href="#Backtracing" class="headerlink" title="Backtracing"></a>Backtracing</h3><p>Fibonacci sequence, this is a classic math calculation.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">F(1)=1</span><br><span class="line">F(2)=1</span><br><span class="line">F(n)=F(n-1) + F(n-2)</span><br></pre></td></tr></table></figure></p><p>If we need to calcute F(20), we need F(19) and F(18). For F(19) we need to know F(18) and F(17) util it reaches F(1) and F(2). we can have the following Tree structure.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                     F(20)</span><br><span class="line">        |--------------|---------------|</span><br><span class="line">      F(19)                          F(18)</span><br><span class="line">  |-----|-----|                  |-----|-----|</span><br><span class="line">F(18)       F(17)              F(17)       F(16)</span><br></pre></td></tr></table></figure></p><p>And the leaf of every branch is F(1) and F(2). This looks like we can use recursive method to solve the problem. The recursive method has two condition:</p><ol><li>Baseline, the end of recursive which is F(1)=1, F(2)=1</li><li>Recursive condition, F(n)=F(n-1)+F(n-2)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int fib(int N) &#123;</span><br><span class="line">    if (N == 1 || N == 2) return 1;</span><br><span class="line">    return fib(N - 1) + fib(N - 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>The bracktracing approach will go to the leaf of every branch, it is a Brute-force algorithm. For Tree structure, it is also called DFS. From the Tree graphic, we noticed that F(18) appeared twice. and F(17) will appear three times, which means we have a lots of duplicated calculation. Brachtracing is calculating from top to bottom.</p><h3 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h3><p>Since we know the leaf of every branch is F(1) or (F2), we consider to calculate every node of this tree from bottom to top, this will be much simplier. This is the whole thought of Dynamic Programming. DP problem we need to have a state transition function<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F(n) = |  1  n=1,2</span><br><span class="line">       |  F(n-1)+F(n-2), n&gt;2</span><br></pre></td></tr></table></figure></p><p>It is look exactly same with the bracktracing conditions. Here is the code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int fib(int n) &#123;</span><br><span class="line">    vector&lt;int&gt; dp(n, 0);</span><br><span class="line">    dp[0] = 1;</span><br><span class="line">    for(int i = 1; i &lt; n; i++ ) &#123;</span><br><span class="line">        if( i == 1) dp[1]=2;</span><br><span class="line">        else dp[i] = dp[i-1] + dp[i-2];</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[n-1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Iterate from bottom to top, calculator every node to avoid duplicated calculation. We also can consider dp problem as how to get N from function F previous state. Leetcode 70, Climbing Stairs, for the number N stair, it only has two way to get there from its previous state, either from the N-1 stair or N-2 stair. So for the number N stair, it is the sum of ways to get to N-1 stair and ways of N-2 stair.</p><p>underconstruction<br>bracktracing checkerboard/jump game<br>dp Palindromic Substring</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Backtracing&quot;&gt;&lt;a href=&quot;#Backtracing&quot; class=&quot;headerlink&quot; title=&quot;Backtracing&quot;&gt;&lt;/a&gt;Backtracing&lt;/h3&gt;&lt;p&gt;Fibonacci sequence, this is a clas
      
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Network IO Models</title>
    <link href="http://yoursite.com/2021/04/20/Network-IO-Models/"/>
    <id>http://yoursite.com/2021/04/20/Network-IO-Models/</id>
    <published>2021-04-21T04:11:45.000Z</published>
    <updated>2021-04-28T05:23:14.218Z</updated>
    
    <content type="html"><![CDATA[<p>My recent work involved a lot of network IO stuff, like raw TCP/Multicast using Netty and websocket/UDP using Boost.asio. So I went through the NIO models to get a better idea of how it works. I will use TCP server as an example (server need to handle multiple connections). There are lots of charts illustrate these 5 IO models, but I think it is better to understand why we need these models.</p><p>First, we need to set up the server socket then make this socket bind with a port and listen. In linux, everything is file descriptor, so does the socket. Below is the Pseudocode.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setup fd :</span><br><span class="line">socket fd</span><br><span class="line">bind fd 8080</span><br><span class="line">listen fd</span><br></pre></td></tr></table></figure></p><h5 id="Block-IO"><a href="#Block-IO" class="headerlink" title="Block IO"></a>Block IO</h5><p>Now if a client asking for connection, our server needs to accept the coming request. So we need to call the <code>accept</code> function. However, the <code>accept</code> will block the process until recevie a connection request.</p><p>After connection request received by server, <code>accept</code> will return a new <em>fd</em> which handles the requests from the connected client. <code>recvfrom</code> can get data from the client but it will also block the process. And we need our server to handle multiple clients, so we can use <code>while</code> for the <code>accept</code> to connect new connection and <code>recvfrom</code> for data communication. The server process will be like<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">                       app server</span><br><span class="line">                           |</span><br><span class="line">                |       setup fd       |</span><br><span class="line">                |       while(1)       |</span><br><span class="line">                |     &#123;  accept fd     |   block util connected, return fd1 </span><br><span class="line">                | recvfrom fd1,2... &#125;  |   block util first client send data</span><br><span class="line">                    |      |</span><br><span class="line">Client 1  ----------|      |----------------   Client 2</span><br></pre></td></tr></table></figure></p><p>This server can only accept next connection after the first connection sends data because the <code>recvfrom</code> block the process. It can not handle more than one client because of this. So we can throw a new thread to handle a connection. So accept only block in main thread waiting for new connection while each new thread for connection will block waiting for receving data.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                    app server</span><br><span class="line">                        |</span><br><span class="line">                |     setup fd      |</span><br><span class="line">                |     while(1)      |</span><br><span class="line">                |   &#123;  accept fd    |   block util connected, return fd1 </span><br><span class="line">                |   thorw thread  &#125; | ---------|---------------------|</span><br><span class="line">                |          |                   |                     |</span><br><span class="line">Client 1  ----------|      |             | T1 recvfrom fd1 |       | T2 |</span><br><span class="line">Client 2 ------------------|</span><br></pre></td></tr></table></figure></p><p>Each thread will map to one client to handle that connection, and get blocked waiting for data. This model can handle thousand of connections (if we can set up OS to create enough threads). However, it exists some problems:</p><ul><li>If we have 1000 of clients, the first 999 clients didnt send any data but the 1000th client sent data. In order to get the data from that client, it needs to switch theads 1000 times and 999 switchings are useless and wasting resource.</li><li>Memory usage waste. Thread stack is independent.</li></ul><p>We don’t want to throw so many threads and also don’t want a blocking function. NIO will be the solution.</p><h5 id="None-Blocking-IO"><a href="#None-Blocking-IO" class="headerlink" title="None Blocking IO"></a>None Blocking IO</h5><p>Linux provides a NONBLOCK choice to avoid throwing threads to receive data. So we pass NONBLOCK to socket or use fcntl to set NONBLOCK type fd. When we call recvfrom/accept function if it does receive data/new connection comes, it will return the data/build connection otherwise just return. Here loop all the fds.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                        app server</span><br><span class="line">                             |</span><br><span class="line">                |        setup fd         |</span><br><span class="line">                |        while(1)         |</span><br><span class="line">                |      &#123;  accept fd       |</span><br><span class="line">                |   recvfrom fd1,fd2..  &#125; | </span><br><span class="line">                    |      |</span><br><span class="line">Client 1  ----------|      |</span><br><span class="line">Client 2 ------------------|</span><br></pre></td></tr></table></figure></p><p>Now it is possible to use only one thread to handle all connections. It still has some cons:</p><ul><li>Every loop, it will call recvfrom from the linux kernel no matter it has data or not. The complexity is O(n). For N connections, if only one connection has data recevied, it will cause a lot of waste.</li></ul><p>So next improvement will be how to reduce the system call(recvfrom) if only one connection receives data? How to ignore the system call which does not have data while looping?</p><h5 id="Multiplexing"><a href="#Multiplexing" class="headerlink" title="Multiplexing"></a>Multiplexing</h5><blockquote><p><code>select</code> allow a program to monitor multiple file descriptors, waiting until one or more of the file descriptors become “ready” for some class of IO operation.</p></blockquote><p>The while loop will be like:</p><ol><li>use <code>FD_SET</code> to pass the socket fd(listen) in to fd array.</li><li>check the return fd array has the listen fd or not</li><li>if it has listen fd, call accept to build a new connection and get a connection fd.</li><li>pass the new connection fd into the fd array</li><li>check fd array has the connection fd or not</li><li>if it has connection fd, call recvfrom<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">                        app server</span><br><span class="line">                             |</span><br><span class="line">                |        setup fd         |</span><br><span class="line">                |        while(1)         |</span><br><span class="line">                |   &#123;  select(fd*) -&gt; num |</span><br><span class="line">                |         accept(fd)      |</span><br><span class="line">                |        recvfrom(fd*)  &#125; | </span><br><span class="line">                    |      |</span><br><span class="line">Client 1  ----------|      |</span><br><span class="line">Client 2 ------------------|</span><br></pre></td></tr></table></figure></li></ol><p>Everytime loop the fds, the complexity is O(1) and O(n) for recvfrom.</p><ul><li>Every loop, application needs to pass all file descriptors into select.</li><li>Kernel needs to loop all the fds, for kernel it is O(N)</li></ul><p>We have a <code>epoll</code> function to solve this.<br>First, <code>epoll_create</code> will create a space in kernel then <code>epoll_ctl</code> can add or delete listen fd or read/write fd in that space. If the fd is ready, kernel will pass that fd to another space. We can use epoll_wait to get ready fds. It should look like the following chart.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">                    app server</span><br><span class="line">       |---------------- |-------------------------|</span><br><span class="line">       |                 |epoll_ctl(add/del)       |</span><br><span class="line">       |epoll_create     |                         |epoll_wait</span><br><span class="line">       |                 |                         |</span><br><span class="line">       |    |-------------------|                  |</span><br><span class="line">       |    |     listen fd     |        |-----------------|</span><br><span class="line">|---------- |   read/write fd   |--------|       fd        |---------|</span><br><span class="line">|           |-------------------|        |-----------------|        |</span><br><span class="line">|               kernel                                              |</span><br><span class="line">|-------------------------------------------------------------------|</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int listenfd = socket();</span><br><span class="line">bind(listenfd, addr);</span><br><span class="line">listen(listenfd);</span><br><span class="line">int efd = epoll_create(0);</span><br><span class="line">epoll_ctl(efd, epoll_ctrl_add, listenfd, &amp;ev);</span><br><span class="line">while(true) &#123;</span><br><span class="line">    epoll_event evs[size];</span><br><span class="line">    int nevent = epoll_wait(efd, evs, size, timeout);</span><br><span class="line">    for(int i; i&lt;nevent; i++) &#123;</span><br><span class="line">        if(e-&gt;fd==listenfd) &#123;</span><br><span class="line">            int fd = accept(listenfd);</span><br><span class="line">            epoll_ctl(efd, epoll_ctrl_add, fd, &amp;ev);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            read/write/logic</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Application use multiplxing to get ready fds (accpet/recvfrom/write) but the app needs to do the operation itself. It is the synchronize model (BIO, NIO, Multiplexing). Linux is hard to achieve AIO (asynchronize IO) considering OS safety (Windows use Iocp as AIO).</p><h5 id="Signal-driven"><a href="#Signal-driven" class="headerlink" title="Signal-driven"></a>Signal-driven</h5><h5 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h5><p>These two are not common used.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;My recent work involved a lot of network IO stuff, like raw TCP/Multicast using Netty and websocket/UDP using Boost.asio. So I went throu
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="NIO" scheme="http://yoursite.com/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>The Rule of Three</title>
    <link href="http://yoursite.com/2020/07/31/rule-of-three/"/>
    <id>http://yoursite.com/2020/07/31/rule-of-three/</id>
    <published>2020-07-31T23:49:29.000Z</published>
    <updated>2020-08-15T21:49:02.372Z</updated>
    
    <content type="html"><![CDATA[<p>Once I saw a comment about C++, said that if you want to check whether the programmer is experienced or not, check if he properly handled or disabled copy constructor or assign operator if he has a destructor or delete resource. I never notice this before. The essential idea of this comment is the rule of three.</p><blockquote><p>If a class requires a user-defined destructor, a user-defined copy constructor, or a user-defined copy assignment operator, it almost certainly requires all three.</p></blockquote><h5 id="Constructor-and-Destructor"><a href="#Constructor-and-Destructor" class="headerlink" title="Constructor and Destructor"></a>Constructor and Destructor</h5><p>There are three casese that copy constructor will be called which means object will be the initial value for another object.</p><ol><li>A aa = a;</li><li>f(A a)</li><li>return a;</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class A &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        A( <span class="keyword">int</span> size );</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If class <code>A</code> has been defined with a copy constructor like <code>A( const&amp; A a)</code>, it mostly will call this one. What if we do not have the copy constructor? The C++ will follow default memberwise initialization rule, which means copy the data member recursively.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">A <span class="title">a</span><span class="params">( <span class="number">5</span> )</span></span>;</span><br><span class="line">A copy = a;</span><br><span class="line"><span class="comment">// no copy constructor, it will be equal to</span></span><br><span class="line">copy.len = a.len;</span><br></pre></td></tr></table></figure><p>Copy constructor will copy the value one by one like the last line. If we have a pointer in our class, we need to deal the memory manually. In constructor, we need to apply for memory and in destructor we need to free this memory. This class will be like below.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Class A &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        A( <span class="keyword">int</span> size ) &#123;</span><br><span class="line">            data = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">        &#125;</span><br><span class="line">        ~A() &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size;</span><br><span class="line">        <span class="keyword">int</span>* data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Shallow-Copy-and-Deep-Copy"><a href="#Shallow-Copy-and-Deep-Copy" class="headerlink" title="Shallow Copy and Deep Copy"></a>Shallow Copy and Deep Copy</h5><p>Now since we have a pointer in our class, we need to manually free the memory so we have a customized destructor to handle that. What if we do not obey the rule of three, that we do not set up a customized copy constructor and override assign operator. When we assign an object to another object, the C++ compiler will call its default copy constructor. Initilize the data member recursively.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">A <span class="title">a</span><span class="params">( <span class="number">5</span> )</span></span>;</span><br><span class="line">A copy = a;</span><br><span class="line"><span class="comment">// no copy constructor, it will be equal to</span></span><br><span class="line">copy.data = a.data;</span><br><span class="line">copy.len = a.len;</span><br></pre></td></tr></table></figure></p><p>However, this copy process is <em>Shallow Copy</em>, it is only copy the value of each data member. This will cause memory leak. Pointer <code>copy.data</code> and <code>A.data</code> pointing to the same chunk of memory. When we release object A, destructor of A will free this memory, after that we release object copy, the same chunk of memory will be freed again. Default copy constructor is shallow copy and it will cause memory leak problem.</p><p>In order to solve this, we need <em>Deep Copy</em>. Now we setup a customized copy constructor<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A(<span class="keyword">const</span> A&amp; a) :</span><br><span class="line">&#123;</span><br><span class="line">    size = a.size</span><br><span class="line">data = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In our copy constructor, we use deep copy, which apply for a new memory for its own pointer. When release each object, the destructor will only free the memory this object applied. Now we can see the difference of <em>Shallow Copy</em> and <em>Deep Copy</em>. </p><p>This also explain for the rule of three. When we have a customized destructor, that means we need to handle the memory free for the pointer. If we do not obey the rule, the default copy contructor will have a shallow copy. Rule of three force us to have a deep copy.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Once I saw a comment about C++, said that if you want to check whether the programmer is experienced or not, check if he properly handled
      
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="Deep copy" scheme="http://yoursite.com/tags/Deep-copy/"/>
    
  </entry>
  
  <entry>
    <title>C++ Polymorphism</title>
    <link href="http://yoursite.com/2020/05/17/C-Polymorphism/"/>
    <id>http://yoursite.com/2020/05/17/C-Polymorphism/</id>
    <published>2020-05-17T17:45:31.000Z</published>
    <updated>2020-08-15T21:49:02.370Z</updated>
    
    <content type="html"><![CDATA[<p>When I first time using C++ in my work, I was wondering why is the parent class desctructor need to be virtual. It is something related to polymorphism. About polymorphism, we know there are three principles:</p><ol><li>inheritance</li><li>override</li><li>upcast, father pointer/reference pointing to a child object</li></ol><p>You certainly can find lots of examples in Java, expecially used by the Java interface. Here I want to talk about the polymorphism in C++.</p><h4 id="Static-and-Dynamic-Polymorphism"><a href="#Static-and-Dynamic-Polymorphism" class="headerlink" title="Static and Dynamic Polymorphism"></a>Static and Dynamic Polymorphism</h4><p>The essential concept of polymorphism is one interface but multiple forms. There are two types polymorphism, static polymorphism and dynamic polymorphism. The difference is when to bind the function address.</p><blockquote><p>In the compile time, we can confirm the function called by which object. For example, overload and generic are static polymorphism. </p><p>When we using a virtual function, it can only bind the function address in the run time, which is a dynamic polymorphism. In this blog, I will discuss more on dynamic binding and virtual function in cpp.</p></blockquote><h4 id="C-object-model"><a href="#C-object-model" class="headerlink" title="C++ object model"></a>C++ object model</h4><p>For C, data and function are separate. It does not support the relation between these two. C++ use abstact data type ADT to bind data and function. C++ has two types of data member, static and non-static and it has three types of function member, static, nonstatic and virtual.</p><p>we can see a C++ object model here. Non-static variable members will be put in a data member table. For virtual function, C++ object model has a vptr in data member table which will point to a virtual table. The first slot of the virtual table is virtual type object. </p><p>pic here</p><h4 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h4><p>Here is how C++ support polymorphism.</p><ol><li>Base class pointer/reference pointing to a derived class</li><li>Function need to be virtual.</li></ol><p>Here is a simple example (we don’t consider destructor here).<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"animal sleep"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"animal breathe"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span>:</span><span class="keyword">public</span> animal</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"fish bubble"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Fish fh;</span><br><span class="line">    Animal *pAn = &amp;fh;</span><br><span class="line">    Fish *pFh = &amp;fh;</span><br><span class="line">    animal ani = fh;</span><br><span class="line">    ani.breathe();</span><br><span class="line">    pAn-&gt;breathe();</span><br><span class="line">    pFh-&gt;breathe();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>:|---------------------|                      --|</span><br><span class="line">     |        Animal       |  ---&gt;  Animal memory   |</span><br><span class="line"><span class="number">100</span>x |---------------------|                        | --&gt;Fish memory</span><br><span class="line">     | Fish addtional part |                        |</span><br><span class="line">     |---------------------|                      --|</span><br></pre></td></tr></table></figure></p><p>The result is<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">animal breathe</span><br><span class="line">animal breathe</span><br><span class="line">fish bubble</span><br></pre></td></tr></table></figure></p><p>So for the first <em>ani</em> variable, it will cause an object slicing. It is easy to explain. <code>animal ani = fh;</code> It will call <em>animal</em> copy constructor and assign fish object to an animal object. Animal object won’t has any fish addtional infomation, that is object slicing.</p><p>We have two pointers, <em>pAn</em> and <em>pfh</em> pointing to the same address, the first byte of the <em>Fish</em> object. However, there is an important difference between these two pointers. <em>pAn</em> only contains the <em>Animal</em> memory and <em>pFh</em> has the whole fish object memory. This is why we have <em>animal</em> porinter pointing to <em>fish</em> but it still do not have polymorphism.</p><p>Let’s make the <em>breathe</em> as virtual function. <em>main</em> function will be same.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"animal sleep"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">virtual</span> <span class="title">breathe</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"animal breathe"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span>:</span><span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">breathe</span><span class="params">()</span> override </span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"fish bubble"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Based on what we talked about C++ object model, we will have a virtual table pointer pointing a virtual table<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Animal</span><br><span class="line">|---------------------|</span><br><span class="line">|        Animal       |</span><br><span class="line">|---------------------|            |-------|</span><br><span class="line">|    __vptr_Animal    |  -------&gt;  | slot1 |  ----&gt; type_info for Animal</span><br><span class="line">|---------------------|            |-------|</span><br><span class="line">                                   | slot2 |  ----&gt; Animal::breathe()</span><br><span class="line">                                   |-------|</span><br><span class="line">Fiah</span><br><span class="line">          |-- |---------------------|</span><br><span class="line">          |   |        Animal       |</span><br><span class="line">Animal    |   |---------------------|       |-------|</span><br><span class="line">subobject |   |    __vptr_Animal    |  --&gt;  | slot1 |  --&gt; type_info for Fish</span><br><span class="line">          |-- |---------------------|       |-------|</span><br><span class="line">              | Fish addtional part |       | slot2 |  --&gt; Fish::breathe()</span><br><span class="line">              |---------------------|       |-------|</span><br></pre></td></tr></table></figure></p><p>Virtual functions address have been obtained during complie time. Virtual function table size and contains can not be modified during run time. In order to find the table, very class object has a <em>vptr</em> pointer pointing to the virtual table. And in the virtual table, the virtual function will be indexed in the table slots. All this will be done in the compile time, while in the runtime it will activate the virtual function.</p><p>Activatation the virtual function has three possibility:</p><ol><li>override the base virtual function, it will replace the base class virtual function</li><li>Inherent the base virtual function</li><li>Add new virtual function, enlager the virtual table.</li></ol><p>(pure vitual function index put <em>pure_virtual_call() with the corresponding slot).<br>So when we change _breathe</em> as virtual function in <em>Animal</em> and override <em>breathe</em> in <em>Fish</em>, it will replace the slot2 with <code>Fish::breathe()</code> during the activation in the runtime.</p><h4 id="Virtual-destructor"><a href="#Virtual-destructor" class="headerlink" title="Virtual destructor"></a>Virtual destructor</h4><p>Now, I think we can explain why the base class destructor need to be virtual.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Animal *pAn = new Fish;</span><br><span class="line">    delete pAn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>When we do the <code>delete pAn</code> it will call the <em>Animal</em> destructor to destruct an object of <em>Animal</em> but it actually created a <em>Fish</em> object. it will cause memory problem.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When I first time using C++ in my work, I was wondering why is the parent class desctructor need to be virtual. It is something related t
      
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="Polymorphism" scheme="http://yoursite.com/tags/Polymorphism/"/>
    
  </entry>
  
  <entry>
    <title>TLS and Boost websocket</title>
    <link href="http://yoursite.com/2019/09/28/TLS-and-Boost-websocket/"/>
    <id>http://yoursite.com/2019/09/28/TLS-and-Boost-websocket/</id>
    <published>2019-09-29T02:38:12.000Z</published>
    <updated>2020-08-15T21:49:02.372Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TLS-Process"><a href="#TLS-Process" class="headerlink" title="TLS Process"></a>TLS Process</h3><p>My current project is dealing with boost websocket and tls protocol. Currently, our company use boost websocket(ws) to build connection between client and server. Client will send frame registration/request to server and server will send result/frame back. When I took it over, the websocket library I our company does not implement tls verification for ws and I need to finish this feature.</p><p>No matter what protocol websocket or http we use for communication, we send message through the network. Without an encryption, all the messages are plaintext. A man in middle can hack the message and get the information, credit card info, account and password, etc.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Client                                     Server</span><br><span class="line">   |           username password             |</span><br><span class="line">   |          -------------------&gt;           |</span><br><span class="line">   |                                         |</span><br><span class="line">   |                                         |</span><br></pre></td></tr></table></figure><p>We definitely do not want to send plaintext through the network. Man in the middle(MITM) can attack easily. Any one in the network can see this message. So the first thought is to encrypt the message. </p><p>For the encryption, symmetric cryptographic algorithm provides one key. Both encryption and decryption use the same key.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F(key, data) = ciphertext</span><br><span class="line">F&apos;(key, ciphertext) = data</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Client                                     Server</span><br><span class="line">   |PK         OIUA(W&amp;*@!NA&lt;&gt;SDH             | PK</span><br><span class="line">   |          -------------------&gt;           |</span><br><span class="line">   |                                         |</span><br><span class="line">   |                                         |</span><br></pre></td></tr></table></figure><p>The most widely used algorithm of symmetric encryption is called AES. The pros of this is that it is fast and it is good to encrypted large data. However, it is hard to determine the key between client and server. Whether client send key to server, or server send the key to client. MITM can get the key and hack the connection. Encryption will become meaningless.</p><p>Here we have asymmetric encryption. For asymmetric encryption, it will generate two keys, one is called public key, another one is called private key. Any info encrypted by one of them can only get decrypted by the another key.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F(Pk1, data) = ciphertext</span><br><span class="line">F&apos;(Pk2, ciphertext) = data</span><br><span class="line">F(Pk2, data) = ciphertext</span><br><span class="line">F&apos;(Pk1, ciphertext) = data</span><br></pre></td></tr></table></figure><p>Now the message between client and server will be like this<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Client                                     Server</span><br><span class="line">   |Public key      OIUA(W&amp;*@!NA&lt;&gt;SDH        | Private key</span><br><span class="line">   |              -------------------&gt;       |</span><br><span class="line">   |               UIA*(&amp;&amp;*QJKASDKKAS        |</span><br><span class="line">   |              &lt;-------------------       |</span><br></pre></td></tr></table></figure></p><p>On client side, we use the public key to encrypt the message then send it to server. Private key will only kept by server. The message which is encrypted by the public key can only decrypted by private key. If MITM intercepts the message, he does not have the private key, so he can not decrypted message. It seems to work fine. There are problems. </p><ul><li>the process of asymmetric encryption and decryption are slow.</li></ul><p>What’s more, there are two security problem</p><ul><li>MITM can have the public key and is able to decrypt the message from server to client</li><li>It can not guarantee that the public key for client is from the server not MITM</li></ul><p>Let’s solve this one by one. For the disadvantage of asymmetric encryption and public key exposure we can combine the symmetric encryption and asymmetric encryption.</p><ol><li>After connection established, client will ask for public key</li><li>Server sends public key to the client</li><li>Client generates a random number P encrypted by public key and sends it to the server</li><li>Server will decrypt the number P and confirm the P will be the key for symmetric encryption</li><li>The following messages will be symmetric encrypted by this number P</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Client                                     Server</span><br><span class="line">   |               ask for public key        | ---</span><br><span class="line">   |              -------------------&gt;       |   |</span><br><span class="line">   |               send public key           |   |</span><br><span class="line">   |              &lt;-------------------       |   | --&gt; asymmetric encryption</span><br><span class="line">   |                send num P as key        |   |</span><br><span class="line">   |              -------------------&gt;       |   |</span><br><span class="line">   |   confirm P as symmetric encryption key |   |</span><br><span class="line">   |              &lt;-------------------       | ---</span><br><span class="line">   |PK              OIUA(W&amp;*@!NA&lt;&gt;SDH        | PK</span><br><span class="line">   |               -------------------&gt;      |</span><br></pre></td></tr></table></figure><p>So Even though MITM gets the message he does not know the newly generated key for symmetric encryption by the client. He can not decrypt the message. But the second problem still not get fixed. How about the MITM get the very first message asking for public key after the connection established.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Client                    MITM                   Server</span><br><span class="line">   |  ask for public key   |  ask for public key   |</span><br><span class="line">   | -------------------&gt;  | -------------------&gt;  |</span><br><span class="line">   |  send fake public key |  send public key      |</span><br><span class="line">   |  &lt;------------------- | &lt;-------------------  | </span><br><span class="line">   |  send num P as key    |  send num P as key    |</span><br><span class="line">   |  -------------------&gt; | -------------------&gt;  |</span><br><span class="line">   | confirm P as the key  | confirm P as the key  |</span><br><span class="line">   | &lt;-------------------  | &lt;-------------------  |</span><br></pre></td></tr></table></figure></p><p>If the MITM get the first message and send a fake public key to trick the client he is the server. Now we have a license to solve this problem. It is called Certification Authority(CA).</p><p>In the whole internet, all users will admit some authorized institutions, like Microsoft, Google. They will be considered as Root Authority so every browser will be embedded with these institutions’ public key. You won’t have any authority issue with these public keys when you install your browser.</p><p>When server apply for a license with all company information, the institution will review the information. After the review, institution will generate two keys, one is public key another is private key and a CA license. Private key will kept by the server.</p><p>CA license has all company info and the server public key. And hash algorithm will be used to generate a hash value which is called digest. Institution will use its private key to encrypt the digest as a signature. The signature will append to the end of the CA.</p><p>The process will be</p><ol><li>Instead of asking for public key after connection, client will ask for CA license.</li><li>Server sends CA license to the client</li><li>Client will check the CA and find the Root institution public key from embedded keys in browser.</li><li>Use the Root authority public key decrypt signature to get the digest</li><li>Do hash calculation of CA info to get a digest</li><li>Compare these two digests (hash value), if they match the public key in CA is authorized</li></ol><p>Even if MITM changed the license, he does not have the Root authority private key to encrypt the CA. The client will know it. So for now, we have solved the potential security problems. The entire process will be </p><ol><li>Client -&gt; Server. SSL version, asymmetric encryption algorithm, random number 1 (Client Hello)</li><li>Server -&gt; Client. Confirm SSL version, symmetric encryption algorithm, random number 2, CA license (Server Hello, Server Certificate, Server Hello Done)</li><li>Client checks CA license</li><li>Client -&gt; Server. Pre-master number (Client Key exchange, Client Certificate*)</li><li>Client, Server use three numbers to generate symmetric encryption key</li><li>Client -&gt; Server. Confirm symmetric encryption key and test message (Change Cipher Spec, Encrypted Handshake Message)</li><li>Server -&gt; Client. Confirm symmetric encryption key and test message (Change Cipher Spec, Encrypted Handshake Message)</li></ol><h3 id="Boost-Library"><a href="#Boost-Library" class="headerlink" title="Boost Library"></a>Boost Library</h3><p>We use boost.beast library and follow <a href="https://www.boost.org/doc/libs/1_66_0/libs/beast/doc/html/beast/examples.html" target="_blank" rel="noopener">async websocket example</a> 1_66_0 version to build our own websocket library. And I also found a very simple <a href="https://github.com/AdamMagaluk/asio-ssl-mutual-auth" target="_blank" rel="noopener">server echo example</a> used boost.beast. I played with this code to have a better understanding of beast library.</p><p>When you are trying to use this server echo example, there are some compile error need to be fixed.</p><p>initialization of io_context should be updated like<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boost::asio::ssl::<span class="function">context <span class="title">ctx</span><span class="params">(boost::asio::ssl::context::sslv23)</span></span>;</span><br></pre></td></tr></table></figure></p><p>and also for dh512.pem is small. Should use dh1024.pem instead.</p><p>When I take over this work, the current websocket we built not implemented SSL. This is not hard to implement. Follow the async example in the boost.beast website and load the key and certificate will be fine. However there are two problems I want to address. I spent lots of time to figure them out.</p><p>First, some messages I sent to server are broken. Before I implemented SSL, it worked fine. Then I add TLS on websocket, and made server keep sending same messages to client. One or two messages can not get parsed by protobuf. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sendMessage( <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; serializedMessage )</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    _webSocket.async_write(</span><br><span class="line">            boost::asio::buffer( serializedMessage ),</span><br><span class="line">            <span class="built_in">std</span>::bind(</span><br><span class="line">                    &amp;Session::onWrite,</span><br><span class="line">                    <span class="keyword">this</span>-&gt;shared_from_this(),</span><br><span class="line">                    <span class="built_in">std</span>::placeholders::_1,</span><br><span class="line">                    <span class="built_in">std</span>::placeholders::_2 ) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I did not control the lifetime of the <code>serializedMessage</code> string parameter extends until the <code>async_write</code> operation is complete, which means <code>async_write</code> was still waiting while <code>sendMessage</code> function already finished. <code>serializedMessage</code> will be released but <code>async_write</code> was not completed. You can check the <a href="https://github.com/boostorg/beast/issues/1707" target="_blank" rel="noopener">issue</a> I raised in Github, the author gave me a explanation in detail.</p><p>The second problem is that websocket reconnection. In our requirements, if the connection is not established, client should retry connect every few seconds. We followed the 1_66_0 boost.beast websocket example.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::make_shared&lt;session&gt;(ioc)-&gt;run(host, port, text);</span><br></pre></td></tr></table></figure></p><p>The old solution is that we have a shared pointer pointing to the session, so every time we want to reconnect we reset the pointer and make a new session to run again. This seems works fine. After I let my client running all night trying to reconnect every few seconds. The client crashed several times every around 6 hours. Resource runs out exception. I used <code>pgrep</code> and <code>ps -T -p</code> to check the task. It created so many client session tasks.</p><p>The reason is that it is a shared pointer and in session it has operations like<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ws_.async_handshake(host_, <span class="string">"/"</span>,</span><br><span class="line">    <span class="built_in">std</span>::bind(</span><br><span class="line">        &amp;session::on_handshake,</span><br><span class="line">        shared_from_this(),</span><br><span class="line">        <span class="built_in">std</span>::placeholders::_1));</span><br></pre></td></tr></table></figure></p><p>The client session will point to itself. Even though you reset the shared pointer, the dead client session task will not get released.</p><p>So for reconnection, <code>asio::ssl::stream</code> can be used again after being closed. Instead of recreating client session, you need to close the dead ssl connection and create a new <code>boost::asio::ip::tcp::socket</code> each time you reconnect.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_ws-&gt;lowest_layer().close();</span><br><span class="line">_ws.reset(new WebSocket(_ioContext, _sslContext));</span><br></pre></td></tr></table></figure><p>This is not enough, the io_context will get returned if all the handler returned. Even though you have a new recreation. There are two solutions I listed <a href="https://github.com/boostorg/beast/issues/1747" target="_blank" rel="noopener">here</a>. You can either set a work guide for the io_conetxt or use a callback timer inside the websocket connection so that the handler can not finish working.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TLS-Process&quot;&gt;&lt;a href=&quot;#TLS-Process&quot; class=&quot;headerlink&quot; title=&quot;TLS Process&quot;&gt;&lt;/a&gt;TLS Process&lt;/h3&gt;&lt;p&gt;My current project is dealing with
      
    
    </summary>
    
      <category term="Protocol" scheme="http://yoursite.com/categories/Protocol/"/>
    
    
      <category term="TLS" scheme="http://yoursite.com/tags/TLS/"/>
    
  </entry>
  
  <entry>
    <title>Java Dynamic Proxy and AOP</title>
    <link href="http://yoursite.com/2019/07/10/Dynamic-proxy-and-AOP/"/>
    <id>http://yoursite.com/2019/07/10/Dynamic-proxy-and-AOP/</id>
    <published>2019-07-11T02:38:12.000Z</published>
    <updated>2020-08-15T21:49:02.370Z</updated>
    
    <content type="html"><![CDATA[<p>AOP and IOC are the two important concepts in Spring developement. AOP is Aspect Oriented Programming. I will start with proxy design pattern.</p><p>When we play online game, we can pay for someone else to help us to play to get experience or money. This <em>someone else</em> is a proxy-like role. Or more likely, vendors do not want to sell clothes or shoes directly with customers, they will ask a proxy, more like a store, to communicate with customers. Do something like, deal with invoice or a return. Proxy is like a middle man stuff. There are two good points for proxy pattern.</p><ul><li>Proxy can hide the original object. For a store, customer will not contact vendor.</li><li>Proxy can decouple the original object with the clients, so proxy can do more stuff, like heal with the invoice or a return in the example.</li></ul><h4 id="Static-Proxy"><a href="#Static-Proxy" class="headerlink" title="Static Proxy"></a>Static Proxy</h4><p>If the proxy class exists already before run time. It is called static proxy. We define an interface called <code>Product</code>, it has two functions <em>sell</em> and <em>service</em>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> interface <span class="title">Product</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>For a vendor, which is considered as a real subject, implements this product interface.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vendor</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"product service"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"product sell"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Customers are so annoying and the vendor does not want to deal with the sell/service process with customers. He wants to ask a proxy for help. This proxy agent can decouple real subject and client.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ProxyAgent implements Product &#123;</span><br><span class="line">    Product product = <span class="keyword">new</span> Vendor(); <span class="comment">// We usually use setter DI to inject</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Proxy service"</span>);</span><br><span class="line">        product.service();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Proxy sell"</span>) ;</span><br><span class="line">        product.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Client calls the <code>ProxyAgent</code> to ask for a service or sell.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    Product product = <span class="keyword">new</span> ProxyAgent();</span><br><span class="line">    product.service();</span><br><span class="line">    product.sell();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>So now, if the process of service or sell need to be changed, you can just fix the functions inside ProxyAgent. Like this product is only for student, you can simply do this<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ProxyAgent implements Product &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Proxy sell"</span>) ;</span><br><span class="line">        <span class="keyword">if</span>( isStudent ) &#123;</span><br><span class="line">            vendor.sell();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Now you can see why we want this proxy. Proxy class can decouple the real subject with the client. But we need to define the proxy class before running the code. However, if we want to use this pattern, we need to define a proxy class for every class.</p><h4 id="Dynamic-Proxy"><a href="#Dynamic-Proxy" class="headerlink" title="Dynamic Proxy"></a>Dynamic Proxy</h4><p>There are so many classes in our code and we definitely do not want to create proxy class for every single class. How can we do not create a proxy class but get the feature of it?</p><p>When we create an instance, the process should be like<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vendor.java  --&gt;  Vendor.class  --&gt;  Class&lt;Vendor&gt;  --&gt; vendor object</span><br></pre></td></tr></table></figure></p><p>So the most important part is to get <code>Class Object</code> and use it to create an instance. We use java refection to get this class object during run time. Interface is the common info shared by proxy and real subject. However, interface can not create an instance. JDK offers us with java.lang.reflect.InvocationHandler interface and java.lang.reflect.Proxy class.</p><p>Proxy.getProxyClass or Proxy.getNewInstance can dynamic create an proxy class instance for the real subject. We can write it this way</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> Object obj; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getNewInstance</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(object.getClass().getClassLoader(), object.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"before"</span>); </span><br><span class="line">        Object result = method.invoke(obj, args); </span><br><span class="line">        System.out.println(<span class="string">"after"</span>); </span><br><span class="line">        <span class="keyword">return</span> result; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We pass the real subject into this dynamic proxy, it will get the classloader and interface info. In the invoke function, we can enhance the code in the way we want.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        DynamicProxy proxySubject = <span class="keyword">new</span> DynamicProxy();</span><br><span class="line">        Product product = (Product)proxySubject.getNewInstance( <span class="keyword">new</span> Vendor() );</span><br><span class="line">        product.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here, the <em>product</em> is an instance of <code>Proxy</code> class which implements <code>product</code> interface.</p><ul><li><code>Product</code> is an interface which does not have constructor and can not generate instance.</li><li>Helped by <code>Proxy</code> class, it can disassemble the info of <code>Product</code> class and generate an proxy object instance</li><li>Handler.invoke proxy the real subject function.</li></ul><p>Proxy class object will generate a proxy object which implements interface. The essential of proxy object is that it implements the interface which is the same implemented in real subject.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AOP and IOC are the two important concepts in Spring developement. AOP is Aspect Oriented Programming. I will start with proxy design pat
      
    
    </summary>
    
      <category term="Design Pattern" scheme="http://yoursite.com/categories/Design-Pattern/"/>
    
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Java Annotation</title>
    <link href="http://yoursite.com/2019/05/09/Java-Annotation/"/>
    <id>http://yoursite.com/2019/05/09/Java-Annotation/</id>
    <published>2019-05-10T05:05:49.000Z</published>
    <updated>2020-08-15T21:49:02.371Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I am learning Spring framework. Spring framework is  based on annotation-driven development. I used to use annotation not often, just like <em>override</em>. For better understanding spring framework, I think I need to understand annotation development first.</p><p>Annotation is a note for the function or varibale. If you search on Google about annotation, there are many tutorials about the definition of annotation in Java. Easy words, hard to understand how the annotation works. Here I will explain annotation development with an example in Android development of <a href="https://github.com/bbbbyang/NetworkListener/tree/Annotation-Network-Listener" target="_blank" rel="noopener">NetworkListener</a> ( switch to <em>Annotation-Network-Listener</em> branch).</p><p>In our application, we want to catch the changes in network, network switching between wifi and mobile, or between connected and disconnected. The first thing to do is to define an enum type NetType</p><h3 id="Define-an-Annotation"><a href="#Define-an-Annotation" class="headerlink" title="Define an Annotation"></a>Define an Annotation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> NetType &#123;</span><br><span class="line">    <span class="comment">// Connected With Wifi/GPRS</span></span><br><span class="line">    AUTO,</span><br><span class="line">    WIFI,</span><br><span class="line">    MOBILE,</span><br><span class="line">    <span class="comment">// No Internet</span></span><br><span class="line">    NONE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>There are 4 states in network, WIFI, MOBILE and NONE are very straightforward. Why we have this AUTO? NetType is not only used for network type for the network connection, also used for which network type changes you want to listen. So AUTO means to listen all types of network change.</p><p>Next we need to define the annotation.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Network &#123;</span><br><span class="line">    <span class="function">NetType <span class="title">netType</span><span class="params">()</span> <span class="keyword">default</span> NetType.AUTO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>There are two annotations for our annotation. This is called meta-annotation. Meta-annotation is like a key word in Java, such as int, string, enum. It is how you define your annotation.</p><ul><li><em>@Target(ElementType.METHOD)</em> : our annotation should be defined on methods.</li><li><em>@Retention(RetentionPolicy.RUNTIME)</em> : annotations are to be recorded in the class file by the compiler and retained by the VM at run time, so they may be read reflectively.</li></ul><p>I am not going to explain all the meta-annotation here. From the definition, it uses <em>@interface</em> to define an annotation, so we can see that annotation is kind of interface, which extends <code>java.lang.annotation.Annotation</code>. <code>netType()</code> is called attribute in annotation, while you can give it a default value. Java will generate an instance that implements this interface by dynamic proxy and then assigns the value to the attribute.</p><h3 id="Use-the-Annotation"><a href="#Use-the-Annotation" class="headerlink" title="Use the Annotation"></a>Use the Annotation</h3><p>After we defined the annotation <em>Network</em>, now we need to use it. In our application, the <em>MainActivity</em> want to listen to the network changes. So we use annotation like this<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Network</span>(netType = NetType.AUTO)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">network</span><span class="params">(NetType netType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (netType) &#123;</span><br><span class="line">        <span class="keyword">case</span> WIFI:</span><br><span class="line">            Log.e(Constants.LOG_TAG, <span class="string">"WIFI"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MOBILE:</span><br><span class="line">            Log.e(Constants.LOG_TAG, <span class="string">"MOBILE"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> NONE:</span><br><span class="line">            Log.e(Constants.LOG_TAG, <span class="string">"Network Disconnected"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>There are two <em>netType</em> here.</p><ul><li><code>public void network(NetType netType)</code> <em>netType</em> is what kind of network connection type is for the device.</li><li><code>@Network(netType = NetType.AUTO)</code> <em>netType</em> is what kind of network changes you want to listen. If you change it to NetType.WIFI which means this function only listeners to WIFI changes.</li></ul><h3 id="Track-the-Annotation"><a href="#Track-the-Annotation" class="headerlink" title="Track the Annotation"></a>Track the Annotation</h3><p>For network changes, we will define a broadcast receiver to catch the network changed broadcasting. Also Receiver needs to know which function in which activity want to know about this. First we need to pass the <em>MainActivity</em> to the receiver. We have a registerObserver function to handle this.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Object register)</span> </span>&#123;</span><br><span class="line">    List&lt;MethodManager&gt; methodList = networkList.get(register);</span><br><span class="line">    <span class="keyword">if</span>( methodList == <span class="keyword">null</span> ) &#123;</span><br><span class="line">        methodList = findAnnotationMethod(register);</span><br><span class="line">        networkList.put(register, methodList);</span><br><span class="line">        Log.e(Constants.LOG_TAG, register.getClass().getName() + <span class="string">" Registered"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>networkList</code> is a map which key is the actiivty and value is a list of methods that has the annotation. <code>findAnnotationMethod</code> is the function to get all satisfied function that has the <em>network</em> annotation.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;MethodManager&gt; <span class="title">findAnnotationMethod</span><span class="params">( Object register )</span> </span>&#123;</span><br><span class="line">    List&lt;MethodManager&gt; methodList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Class&lt;?&gt; clazz = register.getClass();</span><br><span class="line">    Method[] methods = clazz.getMethods();</span><br><span class="line">    <span class="keyword">for</span>( Method method : methods ) &#123;</span><br><span class="line">        Network network = method.getAnnotation(Network.class);</span><br><span class="line">        <span class="keyword">if</span>( network == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Type returnType = method.getGenericReturnType();</span><br><span class="line">        <span class="keyword">if</span>( !<span class="string">"void"</span>.equals( returnType.toString() ) ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException( method.getName() + <span class="string">" return type should be void"</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">        <span class="keyword">if</span>( parameterTypes.length != <span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException( method.getName() + <span class="string">" should have only one parameter"</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        MethodManager methodManager = <span class="keyword">new</span> MethodManager( parameterTypes[<span class="number">0</span>], network.netType(), method );</span><br><span class="line">        methodList.add(methodManager);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> methodList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is the most improtant part in our application of annotation. We use Java refection to do this.</p><ol><li>Get all function in that activity/class and filter the function has the <em>network</em> annotation.</li><li>Filter the voide return type function</li><li>Filter the one parameter function</li><li>Store the function in the list. ParameterType(netType in the parameter, current network connection type), network.netType(netType in our annotation, what kind of network changes we want to catch), method</li></ol><p>Now after we registered all the satisfied methods in our application, how to trigger it? In receiver, when the network changes, the receiver should receive the broadcasting message. Then trigger a <em>post</em> function with the current network connection type<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(NetType netType)</span> </span>&#123;</span><br><span class="line">    Set&lt;Object&gt; set = networkList.keySet();</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">final</span> Object getter : set ) &#123;</span><br><span class="line">        List&lt;MethodManager&gt; methodeList = networkList.get(getter);</span><br><span class="line">        <span class="keyword">if</span>( methodeList != <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">final</span> MethodManager method : methodeList ) &#123;</span><br><span class="line">                <span class="keyword">if</span>( method.getType().isAssignableFrom(netType.getClass() ) ) &#123;</span><br><span class="line">                    <span class="keyword">switch</span> ( method.getNetType() ) &#123;</span><br><span class="line">                        <span class="keyword">case</span> AUTO:</span><br><span class="line">                            invoke( method, getter, netType );</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> WIFI:</span><br><span class="line">                            <span class="keyword">if</span>( netType == NetType.WIFI || netType == NetType.NONE ) &#123;</span><br><span class="line">                                invoke( method, getter, netType );</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> MOBILE:</span><br><span class="line">                            <span class="keyword">if</span>( netType == NetType.MOBILE || netType == NetType.NONE ) &#123;</span><br><span class="line">                                invoke( method, getter, netType );</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>We give the <em>network</em> attribute <em>netType</em> as NetType.AUTO. so <code>method.getNetType()</code> will give what kind of network changes we want to catch. In our case, it is AUTO, so it will invoke the function with the annotation as long as the network changes. If it WIFI, it will only invoke the function when WIFI changes. This is how we use annotation. If you are interested in the source code, you can check my <a href="https://github.com/bbbbyang/NetworkListener/tree/Annotation-Network-Listener" target="_blank" rel="noopener">NetworkListener</a> repo with Annnotation-Network-Listener branch.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Recently, I am learning Spring framework. Spring framework is  based on annotation-driven development. I used to use annotation not often
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Annotation" scheme="http://yoursite.com/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>HashTable And SPH</title>
    <link href="http://yoursite.com/2019/04/05/HashTable-Map-And-SPH/"/>
    <id>http://yoursite.com/2019/04/05/HashTable-Map-And-SPH/</id>
    <published>2019-04-05T23:01:55.000Z</published>
    <updated>2020-08-15T21:49:02.370Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Data-Structure-of-Hash-Table"><a href="#Data-Structure-of-Hash-Table" class="headerlink" title="Data Structure of Hash Table"></a>Data Structure of Hash Table</h4><p>HashTable is used for storing key-value pairs. In Java, when not considering synchronized(thread safety) , we usually use HashMap like<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer,String&gt; hm=<span class="keyword">new</span> HashMap&lt;Integer,String&gt;();</span><br><span class="line">hm.put(<span class="number">100</span>,<span class="string">"LIU"</span>);</span><br></pre></td></tr></table></figure></p><p>The ideal hash table is a fixed array containing some value. Use the key to find the corresponding data. We can check the following diagram.<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/7d/Hash_table_3_1_1_0_1_0_0_SP.svg/315px-Hash_table_3_1_1_0_1_0_0_SP.svg.png" alt></p><p>We want all keys mapping into different units. However, this is impossible because that the size of the array is fixed while we can have key-value as many as possible. So after some kind of hashing function, we will get collisions which are two or more keys result in same value. One way to resolve this collision called separate chaining. This is how HashMap/Table implemented in Java.</p><p>We have two data structure combined, one is array another one is linked list. Every element in the array is a linked list. When it comes to a collision, the new element will get inserted into the linked list. The data structure is like the following picture</p><p><img src="http://wiki.jikexueyuan.com/project/java-collection/images/hashtable1.png" alt></p><h4 id="HashTable-in-SPH"><a href="#HashTable-in-SPH" class="headerlink" title="HashTable in SPH"></a>HashTable in SPH</h4><p>We can see that HashTable data structure is easy to understand. In Java we can directly use HashMap when not considering thread safety. But how could we use this data structure thoughts to solve problems? Here is an application in classic computer graphics fluid simulation algorithm, SPH, Smoothed particle Hydrodynamics.</p><p>Here I will skip all the mathematics principle introduction in SPH. The basic idea of SPH is that there are thousand hundreds of particles in space and every particle will have mainly three forces based on the distance from others (which means one particle will only get affected by the ones within a distance based on itself). Follow this principle, the particles will be moving like fluid.</p><p><img src="http://rnd-zimmer.de/images/sph_particles2.png" alt></p><p>Here is the 3-D version of SPH simulation. There are so many particles within this space. For every single particle, we need to calculate forces from other particles. Lucky, we only need to find all the neighbour particles, the ones within a distance(h) to it.</p><p><img src="https://github.com/bbbbyang/PictureRepository/blob/master/SPH/Particles.jpg?raw=true" alt></p><p>HashTable is a good way used to find the neighbour particles. First we need to put our space into a grid structure. This grid structure is an array, we can simply use a 1-D array to represent 2-D space. The cell size will be the distance that neighbour particles will get affected (I will explain it later).</p><p><img src="https://github.com/bbbbyang/PictureRepository/blob/master/SPH/Gird.jpg?raw=true" alt></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cell_Size = distance;</span><br><span class="line">Grid_Size = Space_Size / Cell_Size;</span><br><span class="line">Grid_Size.x = (<span class="keyword">int</span>)Grid_Size.x;</span><br><span class="line">Grid_Size.y = (<span class="keyword">int</span>)Grid_Size.y;</span><br><span class="line">Number_Cells = (<span class="keyword">int</span>)Grid_Size.x * (<span class="keyword">int</span>)Grid_Size.y;</span><br><span class="line">Cells = (Cell *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Cell) * Number_Cells);</span><br></pre></td></tr></table></figure><p>So Every particle will be falling into one cell. Here is the problem. There must be cases that many particles fall into one cell. Now, we need to use that separate chaining, linked list structure. Particles that are in one cell, will be stored into a linked list. Here is how we use HashTable structure to store all particles.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">void SPH::Hash_Grid()&#123;</span><br><span class="line">for(int i = 0; i &lt; Number_Cells; i++)</span><br><span class="line">Cells[i].head = NULL;</span><br><span class="line">int hash;</span><br><span class="line">Particle *p;</span><br><span class="line">for(int i = 0; i &lt; Number_Particles; i ++)&#123;</span><br><span class="line">p = &amp;Particles[i];</span><br><span class="line">//Calculate_Cell_Position is to find the coordinates in the space</span><br><span class="line">//Calculate_Cell_Hash is to find the index in that 1-D array grid</span><br><span class="line">hash = Calculate_Cell_Hash(Calculate_Cell_Position(p-&gt;pos));</span><br><span class="line">if(Cells[hash].head == NULL)&#123;</span><br><span class="line">p-&gt;next = NULL;</span><br><span class="line">Cells[hash].head = p;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">p-&gt;next = Cells[hash].head;</span><br><span class="line">Cells[hash].head = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we need to find its neighbour particles, first we need to find the one is in which cell. Then, we can only pick the cells around this cell (particles in 8 cells instead of calculating all particles, I did not show all cells) that is why we use distance as the cell size.</p><p><img src="https://github.com/bbbbyang/PictureRepository/blob/master/SPH/neighbour.jpg?raw=true" alt></p><p>For every particle, the x and y position will be used as key and itself will be used as value. We have an array representing grid space and particles in one cell will be stored in a linked list. If you are interested in SPH source code, please check <a href="https://github.com/bbbbyang/Smoothed-Particle-Hydrodynamics" target="_blank" rel="noopener">here</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Data-Structure-of-Hash-Table&quot;&gt;&lt;a href=&quot;#Data-Structure-of-Hash-Table&quot; class=&quot;headerlink&quot; title=&quot;Data Structure of Hash Table&quot;&gt;&lt;/a&gt;Da
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="HashTable" scheme="http://yoursite.com/tags/HashTable/"/>
    
  </entry>
  
  <entry>
    <title>Dependence Inversion Principle (DIP, DI, IoC)</title>
    <link href="http://yoursite.com/2019/01/20/Dependence-Inversion-Principle-IoC/"/>
    <id>http://yoursite.com/2019/01/20/Dependence-Inversion-Principle-IoC/</id>
    <published>2019-01-20T19:50:07.000Z</published>
    <updated>2020-08-15T21:49:02.370Z</updated>
    
    <content type="html"><![CDATA[<p>For the software design, there are five principles called S.O.L.I.D, which stands for</p><ol><li>Single Responsibility Principle</li><li>Open-closed Principle</li><li>The Liskov Substitution Principle</li><li>Interface Segregation Principle</li><li>Dependency Inversion Principle</li></ol><p>In Object-Oriented programming, those principles play an important roles and give us the guideline to design loosely coupled classes. Along with dependency inversion principle(DIP), there are some terms called Inversion of Control(IoC) and Dependency Injection(DI). These are very abstract concepts.</p><h3 id="Dependence-Inversion-Principle-DIP"><a href="#Dependence-Inversion-Principle-DIP" class="headerlink" title="Dependence Inversion Principle (DIP)"></a>Dependence Inversion Principle (DIP)</h3><p>First, let’s see the definition of the DIP:</p><blockquote><p>1.High-level modules should not depend on low-level modules. Both should depend on abstractions.<br>2.Abstractions should not depend upon details. Details should depend upon abstractions.</p></blockquote><p>It is really a abstract concept. Let’s first figure out what is dependency. The dependency is kind of a requirment. For example, a person needs a fork to eat that is the penson depends on the fork. When we coding, we can write like this</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fork</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Using fork to eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    Fork fork;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fork = <span class="keyword">new</span> Fork();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fork.use();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Person</em> holds a <em>Fork</em> variable. What if we want to use a spoon to eat, we probably will write code like following</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spoon</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Using fork to eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Fork fork;</span></span><br><span class="line">    Spoon spoon;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// fork = new Fork();</span></span><br><span class="line">        spoon = <span class="keyword">new</span> Spoon();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// fork.use();</span></span><br><span class="line">        spoon.use();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can see that we need to change lots of places to let this person to use spoon to eat. If we need to use chopsticks, we also need to change chunk of codes. Here is the dependency hierarchy.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person  -&gt;      spoon</span><br><span class="line">        -&gt;      fork</span><br><span class="line">        -&gt;      chopsticks</span><br></pre></td></tr></table></figure></p><p>This hierarchy violates the first point of DIP</p><blockquote><p>High-level modules should not depend on low-level modules. Both should depend on abstractions.</p></blockquote><p>Let’s take a look of these cases. The person trys to call the <em>use</em> function of these tools, which is the only care. Person does not need to care about how the <em>use</em> function implemented that is the job of the tool class. So this <em>use</em> function is the abstract behavior of the tools, while what exactly the tool is should be the details. Here comes to the second point.</p><blockquote><p>Abstractions should not depend upon details. Details should depend upon abstractions.</p></blockquote><p>Depend on these two points. We use an interface for <em>use</em> function and all tools should implemented this function.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">class Fork implements Tool </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Using fork to eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spoon</span> <span class="keyword">implements</span> <span class="title">Tool</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Using spoon to eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Tool tool;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tool = <span class="keyword">new</span> Spoon();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tool.use();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Now the <em>Person</em> does not depend on the <em>Fork</em> or other low-level detail while it depends on the <em>Tool</em> interface. Both high-level and low-level modules depend on interface. It looses coupling between modules. The hierarchy should be like this.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person  -&gt;  tool        &lt;-  spoon</span><br><span class="line">            (abstract)  &lt;-  fork</span><br><span class="line">                        &lt;-  chopsticks</span><br></pre></td></tr></table></figure></p><p>Next the person wants to use other tool to eat, we can simple implemented this interface. This is detail depends on abstraction.</p><h3 id="Inversion-of-Control-IoC"><a href="#Inversion-of-Control-IoC" class="headerlink" title="Inversion of Control (IoC)"></a>Inversion of Control (IoC)</h3><p>The <em>Person</em> class still has the control to instantiate the tool. So everytime we need to change a tool to eat, we have to change the code inside the <em>Person</em> constractor. For the Inversion of Control, <em>Person</em> should move the instantiation of the tool outside its class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Tool tool;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Tool tool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tool = tool;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tool.use();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="keyword">new</span> Fork());</span><br><span class="line">        person.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now this <em>Person</em> class will not need to be modified whenever the tools changed (It does not care). It gives the authority to the <em>Test</em> which is the container. This is the IoC. Let’s change the <em>Person</em> class a little bit.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Tool tool;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Tool tool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tool = tool;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boy</span><span class="params">(Tool tool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(tool);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"I am a boy and I'm "</span>);</span><br><span class="line">        tool.use();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Girl</span><span class="params">(Tool tool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(tool);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"I am a girl and I'm "</span>);</span><br><span class="line">        tool.use();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Boy(<span class="keyword">new</span> Fork());</span><br><span class="line">        Person person2 = <span class="keyword">new</span> Girl(<span class="keyword">new</span> Spoon());</span><br><span class="line">        person1.eat();</span><br><span class="line">        person2.eat()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Person</em> and <em>Tool</em> are loosely coupled and do not depend on each other. Any person can use any tool to eat. In Java Spring/Dagger, we set up the xml or use java refection to instantiate/inject (usually by annotation) in the IoC container.</p><h3 id="Dependence-Injection-DI"><a href="#Dependence-Injection-DI" class="headerlink" title="Dependence Injection (DI)"></a>Dependence Injection (DI)</h3><p>IoC is our purpose and dependence injection is how we do it. In the code above we used contractor injection. If we use a setter, it is called setter injection.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Tool tool;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tool.use();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setter</span><span class="params">(Tool tool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tool = tool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Also we can also use interface injection. It is very similar with setter. With interface injection, we can only inject the tool to the person want to eat.</p><p>Inversion of Control is the design pattern followed the Denpendency Inversion Principle and the Dependency Injection is the way to do it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For the software design, there are five principles called S.O.L.I.D, which stands for&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Single Responsibility Principle&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="Design Pattern" scheme="http://yoursite.com/categories/Design-Pattern/"/>
    
    
      <category term="DIP" scheme="http://yoursite.com/tags/DIP/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0</title>
    <link href="http://yoursite.com/2018/11/15/OAuth-2-0/"/>
    <id>http://yoursite.com/2018/11/15/OAuth-2-0/</id>
    <published>2018-11-16T01:00:32.000Z</published>
    <updated>2020-08-15T21:49:02.371Z</updated>
    
    <content type="html"><![CDATA[<p>Many Apps support third party login, like Facebook, Wechat, Dribbble etc. When we develop an app that need to support this feature, we need to know about OAuth protocol.</p><blockquote><p>OAuth official website<br>OAuth 2.0 is the industry-standard protocol for authorization. OAuth 2.0 focuses on client developer simplicity while providing specific authorization flows for web applications, desktop application, mobile phones and living room devices.</p></blockquote><p>Why we need OAuth protocol?<br>Usually, if we want to get protected resource, the client needs to send user authorization certificate to server, such as username and password. For example, if user login official facebook or dribbble client to get shots, it is safe to send username and password. What if the third app want to get the these protected shots?</p><blockquote><p>Thrid app -&gt; Server : Can I get protected resource?<br>Server -&gt; Third app : Sure. I need username and password first.<br>Third app -&gt; User : Can I get your username and password?<br>User -&gt; Third add : No!!!<br>Third app : Whatever, I will do it myself.</p></blockquote><p>So let’s use a dribbble shots api to get picture shots. In chrome, we can make a simple get request</p><blockquote><p>GET<br><a href="https://api.dribbble.com/v1/shots" target="_blank" rel="noopener">https://api.dribbble.com/v1/shots</a></p></blockquote><p>What we get is<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"Bad credentials."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Just like other services, the server needs user cerdential in order to fetch protected data. That is where OAuth comes into play.</p><p>OAuth protocol define four main characters:</p><ol><li>Resource owner: the owner of the resource, usually called end-user.</li><li>Resource server: the server of the protected data, client can get data based on access Token.</li><li>Client: represent user to get protected resource, any application.</li><li>Authorization server: authorize client access Token.</li></ol><p>OAuth 2.0 process can be described by the following diagram.<br><img src="https://st.deepzz.com/blog/img/oauth2-roles.jpg" alt></p><ul><li>Client send request to resource owner for credential authorization. This request can be sent by authorization server.</li><li>If the end-user authorize the request, the application receives an authorization grant. This will represent resource owner.</li><li>The application requests an access token from the authorization server.</li><li>If the application identity is authenticated and the authorization grant is valid, the authorization server issues an access Token to the application.</li><li>Client/Application request the resource from resource server by access Token.</li><li>Check the access Token and send protected resource to the client.</li></ul><p>This flow is the general process of OAuth 2.0 protocol. Let’s do it with Dribbble example. Here is the details of instruction <code>Authorization Code Mode</code>: <a href="http://developer.dribbble.com/v1/oauth/" target="_blank" rel="noopener">http://developer.dribbble.com/v1/oauth/</a></p><p>First, if a client wants to get authroized, it must be registered with the service. You need to define a callback URL which is the service will redirect the user after they authorize the request. The service will provide credentails which are client ID (public) and client secret (private).</p><ol><li>Client direct user to Authorization Server with client ID, scope, redirect uri.</li><li>Authorization server check the validation of the client and ask user authentication.</li><li>If user authorize the request, authorization server will redirect user-agent to callback uri long with an authorization code.</li><li>After Client gets code, send code, client ID and client secret to authorization server to get access Token. (Server will valid client and also code.)</li><li>Client use access Token to ask for protected resource.</li></ol><p>Here is the Dribbble authorization address.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://dribbble.com/oauth/authorize</span><br></pre></td></tr></table></figure></p><p>And we create a GET request<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getAuthorizeUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String url = Uri.parse(URI_AUTHORIZE)</span><br><span class="line">                    .buildUpon()</span><br><span class="line">                    .appendQueryParameter(KEY_CLIENT_ID, CLIENT_ID)</span><br><span class="line">                    .build()</span><br><span class="line">                    .toString();</span><br><span class="line">    url += <span class="string">"&amp;"</span> + KEY_REDIRECT_URL + <span class="string">"="</span> + REDIRECT_URI;</span><br><span class="line">    url += <span class="string">"&amp;"</span> + KEY_SCOPE + <span class="string">"="</span> + SCOPE;</span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The reason why I use <code>+=</code> to add url and scope because when we use <code>appendQueryParameter</code> it will add some character into our url, something like<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redirect_uri=http://www.dribbbo.com&amp;scope=public+write</span><br><span class="line">redirect_uri=http%3A%2F%2Fwww.dribbbo.com&amp;scope=public%2Bwrite</span><br></pre></td></tr></table></figure></p><p>You can try this url directly in your web browser. The address will immediatelly change from A to B.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A: https://dribbble.com/oauth/authorize?client_id=&lt;client_id&gt;&amp;redirect_url=&lt;redirect_url&gt;&amp;scope=&lt;scope&gt;</span><br><span class="line">B: http://www.dribbbo.com/?code=&lt;code&gt;</span><br></pre></td></tr></table></figure></p><p>In the Authorization activity, we set a webView and load this url. As the url will get changed, we can use <code>shouldOverrideUrlLoading</code> to catch new url and get the code.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">webView.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(url.startsWith(Auth.REDIRECT_URI)) &#123;</span><br><span class="line">            Uri uri = Uri.parse(url);</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">            intent.putExtra(KEY_CODE, uri.getQueryParameter(KEY_CODE));</span><br><span class="line">            setResult(Activity.RESULT_OK, intent);</span><br><span class="line">            finish();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.shouldOverrideUrlLoading(view, url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Now we get authorization code. Next step is to fetch access token. Exchange address is<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST https://dribbble.com/oauth/token</span><br><span class="line">with client_id, client_secret, code</span><br></pre></td></tr></table></figure></p><p>Here is the code to send post request to get access token.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">RequestBody requestBody = <span class="keyword">new</span> FormBody.Builder()</span><br><span class="line">                                        .add(KEY_CLIENT_ID, CLIENT_ID)</span><br><span class="line">                                        .add(KEY_CLIENT_SECRET, CLIENT_SECRET)</span><br><span class="line">                                        .add(KEY_CODE, authCode)</span><br><span class="line">                                        .add(KEY_REDIRECT_URL, REDIRECT_URI)</span><br><span class="line">                                        .build();</span><br><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                            .url(URI_TOKEN)</span><br><span class="line">                            .post(requestBody)</span><br><span class="line">                            .build();</span><br><span class="line">Response response = client.newCall(request).execute();</span><br></pre></td></tr></table></figure></p><p>You can try curl to get Dribbble response<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --data &quot;client_id=&lt;ID&gt;&amp;client_secret=&lt;SECRET&gt;&amp;code=&lt;CODE&gt;&amp;redirect_uri=&lt;CALLBACKURL&gt;&quot; https://dribbble.com/oauth/token</span><br></pre></td></tr></table></figure></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"access_token"</span> : <span class="string">"********"</span>,</span><br><span class="line">    <span class="attr">"token_type"</span> : <span class="string">"bearer"</span>,</span><br><span class="line">    <span class="attr">"scope"</span> : <span class="string">"public write"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can create a JSONObject to get access token. After we get the token, we can use this token along with API to ask for data.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&quot; https://api.dribbble.com/v2/user</span><br></pre></td></tr></table></figure></p><p>This is basically how OAuth 2.0 Authorization Code works. When I first time tried to understand this process, I wonder why they can not just return access token first time. Why the protocol needs to send code first, then exchange for token?</p><p>Here we should bring up difference between user-agent and client.</p><ul><li>User-agent is like front-end (browser), user use it to communicate with server.</li><li>Client is the part asks to access the protected resource.</li></ul><p>So when authorization server transmits of the access token directly to the user-agent, usually a browser, Potentially exposing it to others, including the resource owner (As I said above to try the get code request in browser). However, in authorization code mode, it sends code to user-agent, server will get it and next steps will be a server-to-server process. Access token and client secret will never get exposed. These applications have the decoupled user-agent and client (separate ui and server).</p><p>If the user-agent and the client are coupled, like in-browser javascript application or native mobile app. It won’t need this code to get access. The token and client secret will still be shared with resource owner. The code and client secret just make the flow more complex without adding any more real security. That was when I implemented facebook login in my <a href="https://github.com/bbbbyang/Shopping" target="_blank" rel="noopener">Shopping app</a>, the <a href="https://developers.facebook.com/docs/facebook-login/android/" target="_blank" rel="noopener">facebook android developer</a> tutorial did not give me the instructions for authorization code and client secret. It only provides token to make graph request. This process directly returning access token is called implicit authorization.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Many Apps support third party login, like Facebook, Wechat, Dribbble etc. When we develop an app that need to support this feature, we ne
      
    
    </summary>
    
      <category term="Protocol" scheme="http://yoursite.com/categories/Protocol/"/>
    
    
      <category term="OAuth" scheme="http://yoursite.com/tags/OAuth/"/>
    
  </entry>
  
  <entry>
    <title>Interface Callback and Observer Pattern</title>
    <link href="http://yoursite.com/2018/10/16/Interface-Callback-and-Observer-Pattern/"/>
    <id>http://yoursite.com/2018/10/16/Interface-Callback-and-Observer-Pattern/</id>
    <published>2018-10-16T22:48:26.000Z</published>
    <updated>2020-08-15T21:49:02.370Z</updated>
    
    <content type="html"><![CDATA[<p>Callback is a very important feature in Java. For button click listener, it uses interface callback. I used to use interface callback often, but not very clearly understand it.</p><h4 id="Interface-and-Callback"><a href="#Interface-and-Callback" class="headerlink" title="Interface and Callback"></a>Interface and Callback</h4><p>It is very easy to define an interface. Here we define a <em>EatHelperInterface</em> interface and it has a <em>eat</em> function.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">EatHelperInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>If this person is a Chinese, we just implement this interface.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> <span class="keyword">implements</span> <span class="title">EatHelperInterface</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I need chopsticks to eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>This is how we implement an interface. Also we can define many classes for different people. However, we don’t want so many class defined. It is better to define a <em>People</em> class to keep this interface, so that we can use callback to help different people to eat.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">EatHelperInterface</span> <span class="title">eatHelperInterface</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEatHelperInterface</span><span class="params">(EatHelperInterface eatHelperInterface)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.eatHelperInterface = eatHelperInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eatService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        eatHelperInterface.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>setEatHelperInterface</em> is to register the interface. <em>People.eatService()</em> is to execute the <em>eat</em> function of the interface. Our test can be like this.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        People chinese = <span class="keyword">new</span> people();</span><br><span class="line">        chinese.setEatHelperInterface(<span class="keyword">new</span> Chinese());</span><br><span class="line">        chinese.eatService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In many cases, we would like to use an anonymous inner class to define an interface.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        People people = <span class="keyword">new</span> people();</span><br><span class="line">        people.setEatHelperInterface(<span class="keyword">new</span> EatHelperInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"I need **** to eat"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        people.eatService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Callback can separate the class which use this function and the one implement the function. Because the they do not care about each other. For any <em>People</em>, we just use <em>people.eatService()</em> to perform <em>eat</em> action. Different people pass different implementation into the interface.</p><h4 id="Callback-in-Android"><a href="#Callback-in-Android" class="headerlink" title="Callback in Android"></a>Callback in Android</h4><p>In Android development, for button click function, we have an interface <em>OnClickListener</em> and <em>Button</em>(View) contains this interface.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span> </span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">View</span> <span class="keyword">implements</span> <span class="title">Drawable</span>.<span class="title">Callback</span>, <span class="title">KeyEvent</span>.<span class="title">Callback</span>, <span class="title">AccessibilityEventSource</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">protected</span> OnClickListener mOnClickListener;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(OnClickListener l)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (!isClickable()) &#123;  </span><br><span class="line">            setClickable(<span class="keyword">true</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        mOnClickListener = l;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (mOnClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mOnClickListener.onClick(<span class="keyword">this</span>);  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This button that extends the view class is very similar with the People class, which contains the interface and execute its function.</p><p>For <em>MainActivity</em> we should ask for help how to perform this click function. We can implement the interface in <em>MainActivity</em> and pass <em>this</em> into <em>OnClickListener</em>, or we can use anonymous inner class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> Button button; </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);  </span><br><span class="line">        button = (Button)findViewById(R.id.button1); </span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em>Button</em> -&gt; <em>People</em></li><li><em>setOnClickListener</em> -&gt; <em>setEatHeplerInterface</em></li><li><em>onClickListener</em> -&gt; <em>EatHelperInterface</em></li><li><em>onClick</em> -&gt; <em>eat</em></li></ul><p>The difference of these two cases is that <em>people.eatService()</em> called in <em>Test</em>, but for button, only case to trigger the <em>performClick</em> is when we click the button (Not showing in code).</p><h4 id="Observer-Pattern"><a href="#Observer-Pattern" class="headerlink" title="Observer Pattern"></a>Observer Pattern</h4><p>This is a simple Observer Pattern example. Observer A is very sensitive to some actions of observable B. A needs to do actions at the moment changes in B. Also look at the button example. When trigger <em>button.performClick</em>, <em>OnClickListener</em> need to react immediately.</p><p>Trigger: button Click -&gt; view.performClick -&gt; onClick</p><p>Hierarchy: (Button)View.setOnClickListener -&gt; OnClickListener -&gt; onClick</p><p>For Observer Patthern, there are <em>FOUR</em> component: Observer, subscribe, Observable, event. Observer subscribe Observable. when state of Observable changed, observer will know that(subscribe) and trigger its event based on this change.</p><p><img src="http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4446ldj20ga03p74h.jpg" alt></p><ul><li><em>Button</em> -&gt; observable</li><li><em>setOnClickListener</em> -&gt; subscribe</li><li><em>onClickListener</em> -&gt; Observer</li><li><em>onClick</em> -&gt; event</li></ul><p><img src="http://ww4.sinaimg.cn/mw1024/52eb2279jw1f2rx42h1wgj20fz03rglt.jpg" alt></p><p>For observer pattern, it is an very useful pattern and we have many needs of it.</p><p>In Android development, we can easily to achieve infinite loading feature by observer pattern. For a recyclerview, every time it will show 10 items with data and one more item showing loading layout. In adapter <em>onCreateViewHolder</em> and <em>onBindViewHolder</em> we should implement this way.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(viewType == VIEW_TYPE_SHOT) &#123;</span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item_shot, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShotViewHolder(view);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item_loading, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RecyclerView.ViewHolder(view) &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> viewType = getItemViewType(position);</span><br><span class="line">    <span class="keyword">if</span>(viewType == VIEW_TYPE_LOADING) &#123;</span><br><span class="line">        loadMoreListener.onLoadMore();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Shot shot = data.get(position);</span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So everytime when we scrolling to the last item which is VIEW<em>TYPE_LOADING, it will trigger _onLoadMore</em> function. It is like everytime we click button, <em>performClick</em> will triiger <em>onClick</em> function. When we setup adapter, we should implement this loadMoreListenner.onLoadmore function.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shotListAdapter = <span class="keyword">new</span> ShotListAdapter(<span class="keyword">new</span> ArrayList&lt;Shot&gt;(), <span class="keyword">new</span> ShotListAdapter.LoadMoreListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadMore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> page = shotListAdapter.getDataCount() / COUNT_PRE_PAGE + <span class="number">1</span>;</span><br><span class="line">        AsyncTaskCompat.executeParallel(<span class="keyword">new</span> LoadShotTask(page));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>This <em>LoadShotTask</em> extends <em>AsyncTask</em> will use RESTful API to ask for next page of shots. This is a simple use of Interface Callback. The entire source code you can check from my <a href="https://github.com/bbbbyang/DribbbleApp" target="_blank" rel="noopener">Dribbble app</a>.</p><p>Another place to use it is that when we want to refresh the content of a fragment, while the refresh button is not inside the fragment. We need to fresh the fragment from its parent activity. We should implement the listener by the observer pattern. Here is the <a href="https://stackoverflow.com/questions/26606527/android-refresh-a-fragment-list-from-its-parent-activity" target="_blank" rel="noopener">simple example</a>.</p><p>Another widely used of observer pattern is the RxJava.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Callback is a very important feature in Java. For button click listener, it uses interface callback. I used to use interface callback oft
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Interface" scheme="http://yoursite.com/tags/Interface/"/>
    
  </entry>
  
  <entry>
    <title>Starting from ListView</title>
    <link href="http://yoursite.com/2018/06/23/Starting-from-ListView/"/>
    <id>http://yoursite.com/2018/06/23/Starting-from-ListView/</id>
    <published>2018-06-23T20:50:03.000Z</published>
    <updated>2020-08-15T21:49:02.371Z</updated>
    
    <content type="html"><![CDATA[<p>In Android development, <em>ListView</em> and <em>RecyclerView</em> are very important widgets. When I was first time to use ListView. The adapter and getView function really confused me. Functionality of adapter is to display data on the item view of the ListView. You can easily implement it follow the step in <a href="https://developer.android.com/reference/android/widget/ListView" target="_blank" rel="noopener">here</a>. The following picture shows the simple principle of the adapter.</p><p><img src="https://www.careerride.com/Image/MCA/Adapter-view.png" alt></p><p>How the adapter works?</p><h4 id="1-getListItemView"><a href="#1-getListItemView" class="headerlink" title="1. getListItemView"></a>1. getListItemView</h4><p>Let’s put ListView aside. We can use the Linear layout to implement a list structure to display data.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// Main activity layout</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/linear_list"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// Item layout: list_item</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/list_item_text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And we have a List of Items<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Item&gt; listItems;</span><br></pre></td></tr></table></figure></p><p>When we setup UI, we need to find the item layout and put a item into the TextView then add the TextView into the main layout. Repeat this process through all items.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123; </span><br><span class="line">    <span class="comment">// set up....</span></span><br><span class="line"></span><br><span class="line">    LinearLayout linearLayout = (LinearLayout) findViewById(R.id.linear_list);</span><br><span class="line">    <span class="keyword">for</span> (Item item : listItems) &#123;</span><br><span class="line">        View view = getListItemView(item);</span><br><span class="line">        linearLayout.addView(view);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> View <span class="title">getListItemView</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">    View view = getLayoutInflater().inflate(R.layout.list_item, <span class="keyword">null</span>);</span><br><span class="line">    ((TextView) view.findViewById(R.id.list_item_text)).setText(item.text);</span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now you can see that MainActivity is mainly a list structure. The function <em>getListItemView</em> can be considered as a simple adapter that converts the item data to a view.</p><h4 id="2-ItemConverter"><a href="#2-ItemConverter" class="headerlink" title="2. ItemConverter"></a>2. ItemConverter</h4><p>So let’s drag this function to a separate class ItemConverter.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Item&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemConverter</span><span class="params">(Context context, List&lt;Item&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(context).inflate(R.layout.list_item, <span class="keyword">null</span>);</span><br><span class="line">        Item item = data.get(position);</span><br><span class="line"></span><br><span class="line">        ((TextView) view.findViewById(R.id.list_item_text)).setText(item.text);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The mainly functionality of <em>ItemConverter</em> is <em>getView</em> function. It is the same function with <em>getListItemView</em>. Only difference is the augments changed from the item of the list to the position of the item in the list. And the <em>oncreate</em> function in MainActivity will be like this.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LinearLayout linearLayout = (LinearLayout) findViewById(R.id.linear_list);</span><br><span class="line">ItemConverter converter = <span class="keyword">new</span> ItemConverter(<span class="keyword">this</span>, listItems);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; listItems.size(); ++i) &#123;</span><br><span class="line">    View view = converter.getView(i);</span><br><span class="line">    linearLayout.addView(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>So we use a converter to do an adapter job in this case. And we can see very clearly how the getView function works and how the adapter converts data to a view.</p><h4 id="3-OnBindViewHolder-and-CreateViewHolder"><a href="#3-OnBindViewHolder-and-CreateViewHolder" class="headerlink" title="3. OnBindViewHolder and CreateViewHolder"></a>3. OnBindViewHolder and CreateViewHolder</h4><p>You can check the document for how to use ListView. Here not going to talk much about the convertView. There is one difference between ListView and RecyclerView is that RecyclerView is to force use to use ViewHolder. Let’s do it in ListView. For ListView the layout and basic setup you can check <a href="https://developer.android.com/reference/android/widget/ListView" target="_blank" rel="noopener">here</a>. In this document, <em>MyAdapter</em> extends from <em>BaseAdapter</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">    ViewHolder vh;</span><br><span class="line">    <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">        convertView = LayoutInflater.from(context).inflate(R.layout.main_list_item, parent, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        vh = <span class="keyword">new</span> ViewHolder();</span><br><span class="line">        vh.itemText = (TextView) convertView.findViewById(R.id.main_list_item_text);</span><br><span class="line">        convertView.setTag(vh);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        vh = (ViewHolder) convertView.getTag();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Item item = data.get(position);</span><br><span class="line">    vh.itemText.setText(item.text);</span><br><span class="line">    <span class="keyword">return</span> convertView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">    TextView itemText;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Here you can see a simply way to cache a viewHolder. (time consuming of findViewById). In order to force user to use this ViewHolder, we need to drag this ViewHolder to a new abstract class called <em>ViewHolderAdapter</em> which extends <em>BaseAdapter</em>. And our <em>MyAdapter</em> extends <em>ViewHolderAdapter</em>.</p><p>In <em>ViewHolderAdapter</em> we override <em>getView</em> function here. Because in <em>getView</em>, we only care how the view created and how the data binded with the view. So we set two abstract functions here to create view and bind view holder, which will be implemented in <em>MyAdapter</em>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolderAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        ViewHolder vh;</span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            vh = onCreateViewHolder(parent, position);</span><br><span class="line">            convertView = vh.view;</span><br><span class="line">            vh.view.setTag(vh);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            vh = (ViewHolder) convertView.getTag();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        onBindViewHolder(vh, position);</span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder viewHolder, <span class="keyword">int</span> position)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> View view;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.view = view;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">ViewHolderAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ViewHolderAdapter.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(context).inflate(R.layout.list_item, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ItemViewHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolderAdapter.ViewHolder viewHolder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// getItem should be override inside MyAdapter</span></span><br><span class="line">        Item item = (Item) getItem(position);</span><br><span class="line">        <span class="comment">// this viewHolder is upcast from ItemViewHolder created in onCreateViewHolder</span></span><br><span class="line">        <span class="comment">// send to its father class in ViewHolderAdapter</span></span><br><span class="line">        <span class="comment">// then downcast to ItemViewHolder again to get itemText view</span></span><br><span class="line">        ((ItemViewHolder) viewHolder).itemText.setText(item.text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemViewHolder</span> <span class="keyword">extends</span> <span class="title">ViewHolderAdapter</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView itemText;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ItemViewHolder</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(view);</span><br><span class="line">            itemText = (TextView) view.findViewById(R.id.list_item_text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now you can check inside <em>MyAdapter</em>, that is how we use onCreateViewHolder and onBindViewHolder. For how to use <em>RecyclerView</em>, please check <a href="https://developer.android.com/guide/topics/ui/layout/recyclerview" target="_blank" rel="noopener">here</a>. It is basically same process with our adpater.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In Android development, &lt;em&gt;ListView&lt;/em&gt; and &lt;em&gt;RecyclerView&lt;/em&gt; are very important widgets. When I was first time to use ListView. Th
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Mean Shift Segmentation</title>
    <link href="http://yoursite.com/2018/03/19/Mean-Shift-Segmentation/"/>
    <id>http://yoursite.com/2018/03/19/Mean-Shift-Segmentation/</id>
    <published>2018-03-20T03:23:46.000Z</published>
    <updated>2020-08-15T21:49:02.371Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://courses.csail.mit.edu/6.869/handouts/PAMIMeanshift.pdf" target="_blank" rel="noopener">Mean Shift</a> algorithm is the first image analysis research I did in my graduate study in 2015. It is usually used as image segmentation or tracking algorithm. This blog will start with the principle of mean shift and its image segmentation application.</p><h4 id="Non-Parametic-Density-Estimation"><a href="#Non-Parametic-Density-Estimation" class="headerlink" title="Non-Parametic Density Estimation"></a>Non-Parametic Density Estimation</h4><p>This will give you the basic statics background and I won’t talk too much about this.</p><p>If we have 6 data points -2.1, -1.3, -0.4, 1.9, 5.1, 6.2. Let’s draw the histogram. Set width of each bin as 2 and we can get following histogram (left one) (from wiki).</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/41/Comparison_of_1D_histogram_and_KDE.png/500px-Comparison_of_1D_histogram_and_KDE.png" alt></p><p>That’s it, the basic non-parametic density estimation. From this histogram we can know the distribution probability of the points. However, it has some disadvantages. 1. It is not smooth. 2.It highly depends on the width of the bin and the start point. The calculation function for histogram is pretty simply. How can we change the function and make the histogram more smooth and stable? We should calculate the probability density of every point (right one).</p><p><img src="http://images.cnitblog.com/blog/460184/201408/121402307484084.png" alt></p><p>For 2D case here, how can we get the histogram of the red points? We should choose a circle instead of rectangle.</p><p>Change the shape of the “bins” to a circle. We can simply count the number of the red points inside the circle and divided by the total number to get the density distribution <script type="math/tex">p = \frac{K}N</script>. If the circle is small enough, we can get <script type="math/tex">p = \frac{K}{NV}</script>. For high dimensional situation, the principle should be same. The histogram is the density estimation and the counting function is called kernel function.</p><h4 id="Mean-Shift-Clustering"><a href="#Mean-Shift-Clustering" class="headerlink" title="Mean Shift Clustering"></a>Mean Shift Clustering</h4><p>The kernel function we choose is the uniform kernel. (We can choose other function of course.)</p><script type="math/tex; mode=display">k(x)=\begin{cases}c&0 <= x <= 1\\\\0&otherwise\\\\\end{cases}</script><p>So we can get total number of K inside 0 to 1 for example, <script type="math/tex">K(0-1)=\sum k(x_n)</script>. For more general density function, that is (<script type="math/tex">h</script> is the general width instead of 0 to 1)</p><script type="math/tex; mode=display">K(x)=c\sum_{n=1}^N{k(\frac{x-x_n}{h})}</script><p>And we have the density function <script type="math/tex">p = \frac{K}{NV}</script>. For high dimension,</p><script type="math/tex; mode=display">p(x) = c\frac1{N}\sum_{n=1}^N\frac1{h^d}{k(\frac{x-x_n}{h})}</script><p>For any point, the density we can write as</p><script type="math/tex; mode=display">p(x) = \frac{c}{Nh^d}\sum_{n=1}^N{k(||\frac{x-x_n}{h}||^2)}</script><p>Now we have density function, so we can easily get the gradient function.</p><script type="math/tex; mode=display">\nabla{p(x)} = \frac{2c}{Nh^{d+2}}\sum_{n=1}^N(x_n-x)g(x)\\</script><p>We can think about this gradient function in this way. Every point <script type="math/tex">x</script> will have a force dragging the point and the the power of the force is <script type="math/tex">g(x)=-k'(||\frac{x_n-x}{h}||^2)</script>. This force is combined from the forces that every other point give to the point <script type="math/tex">x</script>.We can use this function to find the new position. The <script type="math/tex">g(x)</script> is also a kernel function stands for the <script type="math/tex">g(x)</script> density at point <script type="math/tex">x</script>. If we use uniform kernel, the <script type="math/tex">g</script> density is the same with <script type="math/tex">p</script> density. So, we can derive the density function as</p><script type="math/tex; mode=display">\nabla{p(x)} = \frac{c}{n}\sum_{n=1}^N{g(x)}[\frac{\sum_{n=1}^Nx_ng(x)}{\sum_{n=1}^Ng(x)}-x]</script><p>The third part of the function is the shift value, actually I think it is the shift direction, <script type="math/tex">\frac{\sum_{n=1}^Nx_ng(x)}{\sum_{n=1}^Ng(x)}</script>. So based on shift value, we have a new position for this point. Next what we need to do is to calculated shift value again based on new point until it will not move any more, which is called mode point. This is what we called adaptive step.</p><h4 id="Mean-Shift-Filtering"><a href="#Mean-Shift-Filtering" class="headerlink" title="Mean Shift Filtering"></a>Mean Shift Filtering</h4><p>Mean clustering is to find the mode point. Every point need to find its mode point. For the feature space, every point will be considered as 5 dimensional point <script type="math/tex">[x, y, r, g, b]</script>. There will be 2 bandwidth for this 5D point, one in coordinator, one in RGB color space. We should separate these 2 bandwidth when calculate. </p><p>For image filtering, we should set a maximum iteration number as 5 to find mode point. Based on <script type="math/tex">g(x)</script> and uniform kernel, it is easy to filter the point. Accumulate all point inside the bandwidth and divided by the totally number.</p><script type="math/tex; mode=display">y^{s+1}=\frac{\sum^{N}_{n=1}x^s_n}N</script><p>Next step is to find which points are within the bandwidth. For easy computation, the coordinator feature space will be considered as rectangle for easy calculation. So the points will be calculated inside <script type="math/tex">(2h_s+1)</script> rectangle. This will satisfy the coordinator bandwidth. Next is in the color feature space. Color distance will be the criterion.</p><script type="math/tex; mode=display">ColorDistance = (R_n-R_c)^2+(G_n-G_c)^2+(B_n-B_c)^2</script><p>The color distance should be less than color bandwidth. So now all points satisfy the two bandwidth are obtained. The final step is to use the formula above to get the next shift point. Remember the point is 5D point. 5 iteration or the point will not be changed in coordinator or in color space, that point is the mode point we want. And for easy calculation, we only give the color to the original point.</p><h4 id="Mean-Shift-Segmentation-and-Regions-Merge"><a href="#Mean-Shift-Segmentation-and-Regions-Merge" class="headerlink" title="Mean Shift Segmentation and Regions Merge"></a>Mean Shift Segmentation and Regions Merge</h4><p>Flood fill algorithm and merge the small region.</p><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Source Code : <a href="https://github.com/bbbbyang/Mean-Shift-Segmentation" target="_blank" rel="noopener">My Github</a></p><p><a href="https://courses.csail.mit.edu/6.869/handouts/PAMIMeanshift.pdf" target="_blank" rel="noopener">Mean Shift Segmentation</a> should have three steps:</p><ul><li>Filtering (Mode Searching)</li><li>Merge Similar Regions (Mode clustering)</li><li>Merge Small Regions</li></ul><p>In the original paper, for step 2, when considered mode clustering, not only color similarity and also coordinate position should be within the bandwidth correspondingly. Here, we will only consider color factor to do segmentation.</p><p>Filtering process is the main part of the algorithm.</p><ul><li>Determined the Uniform kernel for filtering.</li><li>Based on one point<sup>1</sup>, within the space bandwidth, calculate every point color distance to the center point.</li><li>For all points, which color distance is within the color bandwidth, calculate the shift vector<br>for the center point and add together<sup>2</sup>. </li><li>Shift the center point. center = center + shift (include color).</li><li>Repeat above steps and stop after 5 iterations or the center point doesn’t move.</li><li>Assigned color to the original point the color. This original point belong to this cluster.</li></ul><p>1.Every point will be considered as 5-D point(R, G, B, x, y).</p><p>2.Shift value is the average value of all points within the bandwidth.</p><p>This code includes two functions.</p><ul><li>Filtering</li><li>Segmentation</li></ul><p>Segmentation function is the Mean Shift Segmentation first two process, which has two parts, one is Mean Shift filtering and other one is flood filled algorithm (Region Growing).</p><p><img src="https://raw.githubusercontent.com/bbbbyang/PictureRepository/e76a6e52ed0b61c4bbcc68df2f0c3d6898d4d8d2/Mean%20Shift/mandril_color256.jpg" alt><br><img src="https://raw.githubusercontent.com/bbbbyang/PictureRepository/e76a6e52ed0b61c4bbcc68df2f0c3d6898d4d8d2/Mean%20Shift/16-16Filtering.jpg" alt><br><img src="https://raw.githubusercontent.com/bbbbyang/PictureRepository/e76a6e52ed0b61c4bbcc68df2f0c3d6898d4d8d2/Mean%20Shift/16-16Segmentation.jpg" alt></p><p><a href="https://courses.csail.mit.edu/6.869/handouts/PAMIMeanshift.pdf" target="_blank" rel="noopener">Mean Shift: A Robust Approach Toward Feature Space Analysis</a></p><script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://courses.csail.mit.edu/6.869/handouts/PAMIMeanshift.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mean Shift&lt;/a&gt; algorithm is the f
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="Mean Shift" scheme="http://yoursite.com/tags/Mean-Shift/"/>
    
  </entry>
  
</feed>
